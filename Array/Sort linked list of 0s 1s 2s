/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

// Node* sortList(Node *head){
//     //create count 
//     int ZeroCount = 0;
//     int OneCount = 0;
//     int SecondCount = 0;
    
//     Node* temp = head;
//     while(temp != NULL) {

//         if(temp -> data == 0)
//             ZeroCount++;
//         else if(temp -> data == 1)
//             OneCount++;
//         else if(temp -> data == 2)
//             SecondCount++;

//         temp = temp -> next;
//     }
//     //list traverse and replace the data
//     temp = head;
//     while(temp != NULL) {

//         if(ZeroCount != 0) {
//             temp -> data = 0;
//             ZeroCount--;
//         }
//         else if(OneCount != 0) {
//             temp -> data = 1;
//             OneCount--;
//         }
//         else if(SecondCount != 0) {
//             temp -> data = 2;
//             SecondCount--;
//         }
//         temp = temp -> next;
//     }
    
//     return head;
// }


//replacement are not allowed
void insertAtTail(Node* &tail , Node* curr) {
    tail -> next = curr;
    tail = curr;
}
Node *sortList(Node *head) {

    //dummy Node
    Node* zeroHead = new Node(-1);
    Node* zeroTail = zeroHead;

    Node* oneHead = new Node(-1);
    Node* oneTail = oneHead;

    Node* twoHead = new Node(-1);
    Node* twoTail =  twoHead;

    // o's ,1's and 2's LL
    Node * curr = head;

    while(curr != NULL) {
        int val = curr -> data;

        if(val == 0) {
            insertAtTail(zeroTail , curr);
        }
        else if(val == 1) {
            insertAtTail(oneTail , curr);
        }
        else if(val == 2) {
            insertAtTail(twoTail , curr);
        }
        curr = curr -> next;
    }

    //merge
    //list is not empty
    if(oneHead -> next != NULL) {
        zeroTail -> next = oneHead -> next;
    }
    else {
        //list is empty
        zeroTail -> next = twoHead -> next;
    }
    oneTail -> next = twoHead -> next;
    twoTail -> next = NULL;

    //setup head
    head = zeroHead -> next;

    //for delete
    delete zeroHead;
    delete oneHead;
    delete twoHead;

    return head;

}
